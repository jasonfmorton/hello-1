# WORK IN PROGRESS
# Overview: release via Google Cloud Deploy for GKE
# Requires git commit triggering to populate COMMIT_SHA variable

substitutions:
  _APP_NAME: hello
  _PIPELINE_NAME: deploy-demo-pipeline
  _POOL_NAME: demo-pool

steps:
  # Go test
  - id: test
    name: golang:1.19
    env:
    - GO111MODULE=on
    entrypoint: /bin/bash
    args: ["-c", "make test"]

  # Scan code 
  - id: scan
    name: snyk/snyk:golang
    entrypoint: /bin/bash
    args:
    - '-c'
    - |-
      snyk config set api=${_SNYK_TOKEN}
      snyk test --severity-threshold=medium
        
  # Build image
  - id: build
    name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
    - -c
    - |
      docker build --build-arg VERSION=${TAG_NAME} -t "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${COMMIT_SHA}" .
  
  # Publish image, get sha256
  - id: publish
    name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
    - -c
    - |
      docker push "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${COMMIT_SHA}" &&
      docker image inspect "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${COMMIT_SHA}" --format '{{index .RepoDigests 0}}' > image-digest.txt && 
      cat image-digest.txt

  # Test against my vulnerability policy
  - id: vulnsign
    name: gcr.io/$PROJECT_ID/kritis-signer
    entrypoint: /bin/bash
    args:
    - -c
    - |
      /kritis/signer \
      -v=10 \
      -alsologtostderr \
      -image=$(/bin/cat image-digest.txt) \
      -policy=./policy/kritis/vulnz-signing-policy.yaml \
      -kms_key_name=${_KMS_KEY_NAME} \
      -kms_digest_alg=${_KMS_DIGEST_ALG} \
      -note_name=${_NOTE_NAME}
    waitFor: ['publish']

  # Generate SBOM
  - id: sbom
    name: us-west1-docker.pkg.dev/cloudy-demos/tools/s3c-helper:latest
    entrypoint: /bin/bash
    args:
    - -c
    - |
      IMAGE="${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${COMMIT_SHA}" &&
      KEY="gcpkms://${_KMS_KEY_NAME}" &&
      cosign sign --key $KEY $IMAGE &&
      cosign verify --key $KEY $IMAGE &&
      syft --scope all-layers -o spdx-json=sbom.spdx.json $IMAGE &&
      cosign attach attestation --attestation sbom.spdx.json $IMAGE
    waitFor: ['vulnsign']

  # Create release in Google Cloud Deploy
  - id: release
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
    - -c
    - |
      gcloud deploy releases create rel-${SHORT_SHA} \
      --delivery-pipeline=${_PIPELINE_NAME} \
      --region=${LOCATION} \
      --annotations=commitId=${REVISION_ID} \
      --images=${_APP_NAME}=$(/bin/cat image-digest.txt)
    waitFor: ['sbom']

images:
- ${LOCATION}-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$_APP_NAME:$COMMIT_SHA
options:
  requestedVerifyOption: VERIFIED
  pool:
    name: 'projects/$PROJECT_ID/locations/$LOCATION/workerPools/$_POOL_NAME'